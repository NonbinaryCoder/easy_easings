/// Easing functions (ported from [easings.net](https://easings.net))
pub trait Ease {
    fn in_sine(t: Self) -> Self;
    fn out_sine(t: Self) -> Self;
    fn in_out_sine(t: Self) -> Self;

    fn in_quad(t: Self) -> Self;
    fn out_quad(t: Self) -> Self;
    fn in_out_quad(t: Self) -> Self;

    fn in_cubic(t: Self) -> Self;
    fn out_cubic(t: Self) -> Self;
    fn in_out_cubic(t: Self) -> Self;

    fn in_quart(t: Self) -> Self;
    fn out_quart(t: Self) -> Self;
    fn in_out_quart(t: Self) -> Self;

    fn in_quint(t: Self) -> Self;
    fn out_quint(t: Self) -> Self;
    fn in_out_quint(t: Self) -> Self;

    fn in_expo(t: Self) -> Self;
    fn out_expo(t: Self) -> Self;
    fn in_out_expo(t: Self) -> Self;

    fn in_circ(t: Self) -> Self;
    fn out_circ(t: Self) -> Self;
    fn in_out_circ(t: Self) -> Self;

    fn in_back(t: Self) -> Self;
    fn out_back(t: Self) -> Self;
    fn in_out_back(t: Self) -> Self;

    fn in_elastic(t: Self) -> Self;
    fn out_elastic(t: Self) -> Self;
    fn in_out_elastic(t: Self) -> Self;

    fn in_bounce(t: Self) -> Self;
    fn out_bounce(t: Self) -> Self;
    fn in_out_bounce(t: Self) -> Self;
}

macro_rules! impl_ease_for_floats {
    ($($t:ty, $consts:path);+) => {
        $(

            impl Ease for $t {
                fn in_sine(t: Self) -> Self {
                    use $consts as consts;
                    1.0 - (t * consts::FRAC_PI_2).cos()
                }
                fn out_sine(t: Self) -> Self {
                    use $consts as consts;
                    (t * consts::FRAC_PI_2).sin()
                }
                fn in_out_sine(t: Self) -> Self {
                    use $consts as consts;
                    -((t * consts::PI).cos() - 1.0) * 0.5
                }

                fn in_quad(t: Self) -> Self {
                    t * t
                }
                fn out_quad(t: Self) -> Self {
                    1.0 - (1.0 - t).powi(2)
                }
                fn in_out_quad(t: Self) -> Self {
                    if t <= 0.5 { t * t * 2.0 }
                    else { 1.0 - (-2.0 * t + 2.0).powi(2) * 0.5 }
                }

                fn in_cubic(t: Self) -> Self {
                    t * t * t
                }
                fn out_cubic(t: Self) -> Self {
                    1.0 - (1.0 - t).powi(3)
                }
                fn in_out_cubic(t: Self) -> Self {
                    if t <= 0.5 { t.powi(3) * 4.0 }
                    else { 1.0 - (-2.0 * t + 2.0).powi(3) * 0.5 }
                }

                fn in_quart(t: Self) -> Self {
                    t.powi(4)
                }
                fn out_quart(t: Self) -> Self {
                    1.0 - (1.0 - t).powi(4)
                }
                fn in_out_quart(t: Self) -> Self {
                    if t <= 0.5 { t.powi(4) * 8.0 }
                    else { 1.0 - (-2.0 * t + 2.0).powi(4) * 0.5 }
                }

                fn in_quint(t: Self) -> Self {
                    t.powi(5)
                }
                fn out_quint(t: Self) -> Self {
                    1.0 - (1.0 - t).powi(5)
                }
                fn in_out_quint(t: Self) -> Self {
                    if t <= 0.5 { t.powi(5) * 16.0 }
                    else { 1.0 - (-2.0 * t + 2.0).powi(5) * 0.5 }
                }

                fn in_expo(t: Self) -> Self {
                    if t == 0.0 { 0.0 }
                    else { (t * 10.0 - 10.0).exp2() }
                }
                fn out_expo(t: Self) -> Self {
                    if t == 1.0 { 1.0 }
                    else { 1.0 - (t * -10.0).exp2() }
                }
                fn in_out_expo(t: Self) -> Self {
                    if t == 0.0 || t == 1.0 { t }
                    else if t <= 0.5 { (t * 20.0 - 10.0).exp2() * 0.5 }
                    else { 1.0 - (t * -20.0 + 10.0).exp2() * 0.5 }
                }

                fn in_circ(t: Self) -> Self {
                    1.0 - (1.0 - t * t).sqrt()
                }
                fn out_circ(t: Self) -> Self {
                    (1.0 - (t - 1.0).powi(2)).sqrt()
                }
                fn in_out_circ(t: Self) -> Self {
                    if t <= 0.5 { 0.5 - (1.0 - (2.0 * t).powi(2)).sqrt() * 0.5 }
                    else { (1.0 - (-2.0 * t + 2.0).powi(2)).sqrt() * 0.5 + 0.5 }
                }

                fn in_back(t: Self) -> Self {
                    const C1: $t = 1.70158;
                    const C3: $t = C1 + 1.0;
                    t.powi(3) * C3 - t * t * C1
                }
                fn out_back(t: Self) -> Self {
                    const C1: $t = 1.70158;
                    const C3: $t = C1 + 1.0;
                    1.0 + (t - 1.0).powi(3) * C3 + (t - 1.0).powi(2) * C1
                }
                fn in_out_back(t: Self) -> Self {
                    const C1: $t = 1.70158;
                    const C2: $t = C1 * 1.525;
                    if t <= 0.5 {
                        (t * 2.0).powi(2) * (t * 2.0 * (C2 + 1.0) - C2) * 0.5
                    } else {
                        (t * 2.0 - 2.0).powi(2) * ((t * 2.0 - 2.0) * (C2 + 1.0) + C2) * 0.5 + 1.0
                    }
                }

                fn in_elastic(t: Self) -> Self {
                    use $consts as consts;
                    const C4: $t = consts::PI * 2.0 / 3.0;
                    if t == 0.0 { 0.0 }
                    else { -(t * 10.0 - 10.0).exp2() * ((t * 10.0 - 10.75) * C4).sin() }
                }
                fn out_elastic(t: Self) -> Self {
                    use $consts as consts;
                    const C4: $t = consts::PI * 2.0 / 3.0;
                    if t == 0.0 || t == 1.0 { t }
                    else { (-10.0 * t).exp2() * ((t * 10.0 - 0.75) * C4).sin() + 1.0 }
                }
                fn in_out_elastic(t: Self) -> Self {
                    fn inner(a: $t, t: $t) -> $t {
                        use $consts as consts;
                        const C5: $t = consts::PI * 2.0 / 4.5;
                        (a.exp2() * ((t * 20.0 - 11.125) * C5).sin()) * 0.5
                    }
                    if t == 0.0 || t == 1.0 { t }
                    else if t <= 0.5 { -inner(t * 20.0 - 10.0, t) }
                    else { inner(t * -20.0 + 10.0, t) + 1.0 }
                }

                fn in_bounce(t: Self) -> Self {
                    1.0 - Ease::out_bounce(1.0 - t)
                }
                fn out_bounce(mut t: Self) -> Self {
                    const N1: $t = 7.5625;
                    const D1: $t = 2.75;
                    if t < (1.0 / D1) {
                        N1 * t * t
                    } else if t < (2.0 / D1) {
                        t -= (1.5 / D1);
                        N1 * t * t + 0.75
                    } else if t < (2.5 / D1) {
                        t -= (2.25 / D1);
                        N1 * t * t + 0.9375
                    } else {
                        t -= (2.625 / D1);
                        N1 * t * t + 0.984375
                    }
                }
                fn in_out_bounce(t: Self) -> Self {
                    if t <= 0.5 { 0.5 - Ease::out_bounce(1.0 - t * 2.0) * 0.5 }
                    else { 0.5 + Ease::out_bounce(t * 2.0 - 1.0) * 0.5 }
                }
            }
        )+
    }
}

impl_ease_for_floats!(f32, std::f32::consts; f64, std::f64::consts);

#[cfg(test)]
mod tests {
    use super::*;

    macro_rules! assert_similar {
        ($left:expr, $right:expr) => {
            let diff = $left - $right;
            if diff.abs() > 0.000001 {
                panic!(
                    concat!(
                        "assertion failed: `(left â‰ˆ right)`\n  left: `",
                        stringify!($left),
                        "` ({}),\n right: `",
                        stringify!($right),
                        "` ({})\n  diff: {}"
                    ),
                    ($left),
                    ($right),
                    diff,
                );
            }
        };
    }

    fn test_fn(f: impl Fn(f64) -> f64, vals: [f64; 11]) {
        assert_similar!(0.0, f(0.0));
        assert_similar!(vals[0], f(1.0 / 12.0));
        assert_similar!(vals[1], f(2.0 / 12.0));
        assert_similar!(vals[2], f(3.0 / 12.0));
        assert_similar!(vals[3], f(4.0 / 12.0));
        assert_similar!(vals[4], f(5.0 / 12.0));
        assert_similar!(vals[5], f(6.0 / 12.0));
        assert_similar!(vals[6], f(7.0 / 12.0));
        assert_similar!(vals[7], f(8.0 / 12.0));
        assert_similar!(vals[8], f(9.0 / 12.0));
        assert_similar!(vals[9], f(10.0 / 12.0));
        assert_similar!(vals[10], f(11.0 / 12.0));
        assert_similar!(1.0, f(1.0));
    }

    #[test]
    fn ease_in_sine() {
        test_fn(
            Ease::in_sine,
            [
                0.008555138626189618,
                0.03407417371093169,
                0.07612046748871326,
                0.1339745962155613,
                0.20664665970876483,
                0.2928932188134524,
                0.39123857099127934,
                0.4999999999999999,
                0.6173165676349102,
                0.7411809548974793,
                0.8694738077799483,
            ],
        );
    }

    #[test]
    fn ease_out_sine() {
        test_fn(
            Ease::out_sine,
            [
                0.13052619222005157,
                0.25881904510252074,
                0.3826834323650898,
                0.49999999999999994,
                0.6087614290087207,
                0.7071067811865475,
                0.7933533402912352,
                0.8660254037844386,
                0.9238795325112867,
                0.9659258262890683,
                0.9914448613738104,
            ],
        );
    }

    #[test]
    fn ease_in_out_sine() {
        test_fn(
            Ease::in_out_sine,
            [
                0.017037086855465844,
                0.06698729810778065,
                0.1464466094067262,
                0.24999999999999994,
                0.37059047744873963,
                0.49999999999999994,
                0.6294095225512604,
                0.7499999999999999,
                0.8535533905932737,
                0.9330127018922194,
                0.9829629131445341,
            ],
        );
    }

    #[test]
    fn ease_in_quad() {
        test_fn(
            Ease::in_quad,
            [
                0.006944444444444444,
                0.027777777777777776,
                0.0625,
                0.1111111111111111,
                0.17361111111111113,
                0.25,
                0.34027777777777785,
                0.4444444444444444,
                0.5625,
                0.6944444444444445,
                0.8402777777777777,
            ],
        );
    }

    #[test]
    fn ease_out_quad() {
        test_fn(
            Ease::out_quad,
            [
                0.15972222222222232,
                0.30555555555555547,
                0.4375,
                0.5555555555555555,
                0.6597222222222223,
                0.75,
                0.826388888888889,
                0.8888888888888888,
                0.9375,
                0.9722222222222222,
                0.9930555555555556,
            ],
        );
    }

    #[test]
    fn ease_in_out_quad() {
        test_fn(
            Ease::in_out_quad,
            [
                0.013888888888888888,
                0.05555555555555555,
                0.125,
                0.2222222222222222,
                0.34722222222222227,
                0.5,
                0.6527777777777779,
                0.7777777777777777,
                0.875,
                0.9444444444444444,
                0.986111111111111,
            ],
        );
    }

    #[test]
    fn ease_in_cubic() {
        test_fn(
            Ease::in_cubic,
            [
                0.0005787037037037037,
                0.004629629629629629,
                0.015625,
                0.037037037037037035,
                0.07233796296296298,
                0.125,
                0.19849537037037043,
                0.2962962962962963,
                0.421875,
                0.5787037037037038,
                0.7702546296296295,
            ],
        );
    }

    #[test]
    fn ease_out_cubic() {
        test_fn(
            Ease::out_cubic,
            [
                0.22974537037037046,
                0.42129629629629617,
                0.578125,
                0.7037037037037036,
                0.8015046296296298,
                0.875,
                0.9276620370370371,
                0.9629629629629629,
                0.984375,
                0.9953703703703703,
                0.9994212962962963,
            ],
        );
    }

    #[test]
    fn ease_in_out_cubic() {
        test_fn(
            Ease::in_out_cubic,
            [
                0.0023148148148148147,
                0.018518518518518517,
                0.0625,
                0.14814814814814814,
                0.2893518518518519,
                0.5,
                0.7106481481481483,
                0.8518518518518519,
                0.9375,
                0.9814814814814815,
                0.9976851851851852,
            ],
        );
    }

    #[test]
    fn ease_in_quart() {
        test_fn(
            Ease::in_quart,
            [
                0.000048225308641975306,
                0.0007716049382716049,
                0.00390625,
                0.012345679012345678,
                0.030140817901234577,
                0.0625,
                0.11578896604938275,
                0.19753086419753085,
                0.31640625,
                0.48225308641975323,
                0.7060667438271604,
            ],
        );
    }

    #[test]
    fn ease_out_quart() {
        test_fn(
            Ease::out_quart,
            [
                0.2939332561728397,
                0.5177469135802468,
                0.68359375,
                0.802469135802469,
                0.8842110339506174,
                0.9375,
                0.9698591820987654,
                0.9876543209876543,
                0.99609375,
                0.9992283950617284,
                0.999951774691358,
            ],
        );
    }

    #[test]
    fn ease_in_out_quart() {
        test_fn(
            Ease::in_out_quart,
            [
                0.00038580246913580245,
                0.006172839506172839,
                0.03125,
                0.09876543209876543,
                0.24112654320987661,
                0.5,
                0.7588734567901235,
                0.9012345679012346,
                0.96875,
                0.9938271604938271,
                0.9996141975308642,
            ],
        );
    }

    #[test]
    fn ease_in_quint() {
        test_fn(
            Ease::in_quint,
            [
                0.0000040187757201646085,
                0.00012860082304526747,
                0.0009765625,
                0.004115226337448559,
                0.012558674125514407,
                0.03125,
                0.06754356352880661,
                0.1316872427983539,
                0.2373046875,
                0.401877572016461,
                0.6472278485082303,
            ],
        );
    }

    #[test]
    fn ease_out_quint() {
        test_fn(
            Ease::out_quint,
            [
                0.35277215149176966,
                0.598122427983539,
                0.7626953125,
                0.868312757201646,
                0.9324564364711935,
                0.96875,
                0.9874413258744856,
                0.9958847736625515,
                0.9990234375,
                0.9998713991769548,
                0.9999959812242798,
            ],
        );
    }

    #[test]
    fn ease_in_out_quint() {
        test_fn(
            Ease::in_out_quint,
            [
                0.00006430041152263374,
                0.0020576131687242796,
                0.015625,
                0.06584362139917695,
                0.2009387860082305,
                0.5,
                0.7990612139917697,
                0.934156378600823,
                0.984375,
                0.9979423868312757,
                0.9999356995884774,
            ],
        );
    }

    #[test]
    fn ease_in_expo() {
        test_fn(
            Ease::in_expo,
            [
                0.001740036558867851,
                0.0031003926796253885,
                0.005524271728019903,
                0.009843133202303695,
                0.017538469504833957,
                0.03125,
                0.05568116988377123,
                0.09921256574801243,
                0.1767766952966369,
                0.3149802624737184,
                0.5612310241546863,
            ],
        );
    }

    #[test]
    fn ease_out_expo() {
        test_fn(
            Ease::out_expo,
            [
                0.4387689758453135,
                0.6850197375262816,
                0.8232233047033631,
                0.9007874342519875,
                0.9443188301162289,
                0.96875,
                0.982461530495166,
                0.9901568667976963,
                0.99447572827198,
                0.9968996073203746,
                0.9982599634411321,
            ],
        );
    }

    #[test]
    fn ease_in_out_expo() {
        test_fn(
            Ease::in_out_expo,
            [
                0.0015501963398126943,
                0.0049215666011518475,
                0.015625,
                0.049606282874006216,
                0.1574901312368592,
                0.5,
                0.8425098687631409,
                0.9503937171259937,
                0.984375,
                0.9950784333988482,
                0.9984498036601873,
            ],
        );
    }

    #[test]
    fn ease_in_circ() {
        test_fn(
            Ease::in_circ,
            [
                0.003478271408216771,
                0.013986702816730645,
                0.031754163448145745,
                0.057190958417936644,
                0.09094065711369048,
                0.1339745962155614,
                0.18776713793258637,
                0.2546440075000701,
                0.3385621722338523,
                0.4472292016074334,
                0.6003473730572733,
            ],
        );
    }

    #[test]
    fn ease_out_circ() {
        test_fn(
            Ease::out_circ,
            [
                0.39965262694272674,
                0.5527707983925666,
                0.6614378277661477,
                0.7453559924999298,
                0.8122328620674137,
                0.8660254037844386,
                0.9090593428863095,
                0.9428090415820634,
                0.9682458365518543,
                0.9860132971832694,
                0.9965217285917832,
            ],
        );
    }

    #[test]
    fn ease_in_out_circ() {
        test_fn(
            Ease::in_out_circ,
            [
                0.0069933514083653225,
                0.028595479208968322,
                0.0669872981077807,
                0.12732200375003505,
                0.2236146008037167,
                0.5,
                0.7763853991962834,
                0.8726779962499649,
                0.9330127018922193,
                0.9714045207910317,
                0.9930066485916347,
            ],
        );
    }

    #[test]
    fn ease_in_back() {
        test_fn(
            Ease::in_back,
            [
                -0.010253113425925924,
                -0.034758796296296295,
                -0.06413656250000001,
                -0.08900592592592592,
                -0.09998640046296295,
                -0.08769750000000004,
                -0.042758738425925924,
                0.044210370370370344,
                0.18259031249999969,
                0.3817615740740743,
                0.6511046412037036,
            ],
        );
    }

    #[test]
    fn ease_out_back() {
        test_fn(
            Ease::out_back,
            [
                0.34889535879629663,
                0.6182384259259257,
                0.8174096875000002,
                0.9557896296296295,
                1.042758738425926,
                1.0876975,
                1.099986400462963,
                1.089005925925926,
                1.0641365625,
                1.0347587962962963,
                1.010253113425926,
            ],
        );
    }

    #[test]
    fn ease_in_out_back() {
        test_fn(
            Ease::in_out_back,
            [
                -0.027718859953703705,
                -0.07758924074074074,
                -0.09968184375,
                -0.0440673703703704,
                0.13918347800925934,
                0.5,
                0.8608165219907409,
                1.0440673703703702,
                1.09968184375,
                1.0775892407407408,
                1.0277188599537037,
            ],
        );
    }

    #[test]
    fn ease_in_elastic() {
        test_fn(
            Ease::in_elastic,
            [
                0.0016350995142658262,
                0.0005383775388688369,
                -0.005524271728019903,
                0.001709242143112897,
                0.01648077037357114,
                -0.015625000000000045,
                -0.04265425077582663,
                0.07600123467884114,
                0.08838834764831832,
                -0.2959846283397619,
                -0.09745674459460679,
            ],
        );
    }

    #[test]
    fn ease_out_elastic() {
        test_fn(
            Ease::out_elastic,
            [
                1.0974567445946062,
                1.2959846283397618,
                0.9116116523516816,
                0.9239987653211588,
                1.0426542507758267,
                1.015625,
                0.9835192296264289,
                0.998290757856887,
                1.00552427172802,
                0.9994616224611311,
                0.9983649004857341,
            ],
        );
    }

    #[test]
    fn ease_in_out_elastic() {
        test_fn(
            Ease::in_out_elastic,
            [
                0.0009257130631453614,
                -0.004888288728445656,
                0.011969444423734044,
                -0.002884348830593738,
                -0.10807628560814392,
                0.5,
                1.108076285608144,
                1.0028843488305939,
                0.988030555576266,
                1.0048882887284456,
                0.9990742869368546,
            ],
        );
    }

    #[test]
    fn ease_out_bounce() {
        test_fn(
            Ease::out_bounce,
            [
                0.052517361111111105,
                0.21006944444444442,
                0.47265625,
                0.8402777777777777,
                0.8754340277777777,
                0.765625,
                0.7608506944444445,
                0.8611111111111112,
                0.97265625,
                0.9392361111111112,
                0.9952256944444445,
            ],
        );
    }

    #[test]
    fn ease_in_bounce() {
        test_fn(
            Ease::in_bounce,
            [
                0.004774305555555469,
                0.06076388888888884,
                0.02734375,
                0.13888888888888873,
                0.23914930555555558,
                0.234375,
                0.12456597222222221,
                0.1597222222222221,
                0.52734375,
                0.7899305555555557,
                0.9474826388888888,
            ],
        );
    }

    #[test]
    fn ease_in_out_bounce() {
        test_fn(
            Ease::in_out_bounce,
            [
                0.03038194444444442,
                0.06944444444444436,
                0.1171875,
                0.07986111111111105,
                0.39496527777777785,
                0.5,
                0.6050347222222223,
                0.9201388888888886,
                0.8828125,
                0.9305555555555556,
                0.9696180555555556,
            ],
        );
    }
}
